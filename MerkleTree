pragma solidity ^0.8.0;

contract MerkleTree {
    bytes32 public root;

    function generateRoot(bytes32[] memory elements) public returns (bytes32) {
        require(elements.length > 0, "At least one element is required");
        require(isPowerOfTwo(elements.length), "Number of elements must be a power of 2");

        bytes32[] memory tree = new bytes32[](elements.length * 2);
        for (uint256 i = 0; i < elements.length; i++) {
            tree[elements.length + i] = elements[i];
        }

        for (uint256 i = elements.length - 1; i > 0; i--) {
            tree[i] = hash(tree[i * 2], tree[i * 2 + 1]);
        }

        root = tree[1];
        return root;
    }

    function hash(bytes32 left, bytes32 right) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(left, right));
    }

    function isPowerOfTwo(uint256 x) internal pure returns (bool) {
        return (x & (x - 1)) == 0;
    }
}
