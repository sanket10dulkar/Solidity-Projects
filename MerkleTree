pragma solidity ^0.8.0;

contract MerkleTree {
    bytes32 public root;

    constructor(bytes32 _root) {
        root = _root;
    }

    function verifyProof(bytes32[] memory proof, bytes32 leaf) public view returns (bool) {
        bytes32 computedHash = leaf;

        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];

            if (computedHash < proofElement) {
                // Concatenate the computed hash with the proof element
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                // Concatenate the proof element with the computed hash
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }

        return computedHash == root;
    }
}
