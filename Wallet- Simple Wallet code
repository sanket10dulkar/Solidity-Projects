pragma solidity ^0.8.0;

contract SimpleWallet {
  address payable public owner;
   
  event Deposit(address indexed sender, uint256 amount);
  event Withdrawal(address indexed recipient, uint256 amount);
   
  constructor() {
    owner = payable(msg.sender);
  }
   
  modifier onlyOwner() {
    require(msg.sender == owner, "Only the owner can call this function.");
    _;
  }
   
  function deposit() public payable {
    emit Deposit(msg.sender, msg.value);
  }
   
  function withdraw(address payable _recipient, uint256 _amount) public onlyOwner {
    require(_recipient != address(0), "Invalid recipient address.");
    require(address(this).balance >= _amount, "Insufficient contract balance.");
     
    _recipient.transfer(_amount);
    emit Withdrawal(_recipient, _amount);
  }
   
  function getBalance() public view returns (uint256) {
    return address(this).balance;
  }
}
